# see problem here
# https://leetcode.com/problems/add-and-search-word-data-structure-design

class WordDictionary:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        
        self.vocabulary = dict()
        

    def addWord(self, word: str) -> None:
        """
        Adds a word into the data structure.
        """
        length = len(word)
        if length in self.vocabulary.keys():
            self.vocabulary[length].append(word)
        else:
            self.vocabulary[length] = [word]

    def search(self, word: str) -> bool:
        """
        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.
        """
        length = len(word)
        
        if length not in self.vocabulary:
            return False         
        
        diffs = []
        for check_word in self.vocabulary[length]:
            diff = 0
            for c1, c2 in zip(word, check_word):
                if c1 == c2 or c1 == '.':
                    pass
                else:
                    diff += 1
            
            diffs.append(diff)
            
        if 0 in diffs:
            return True
        else:
            return False
        


# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)
